@{
    Layout = null;
}
<!DOCTYPE html>
<html @(ViewBag.isRtl ? "dir=rtl" : "")>
<head>
    <meta charset="utf-8" />
    <base href="@Href("~")">
    <title> @ViewBag.Title</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="fontiran.com:license" content="X4ZQZ">
    @{
        var v = typeof(BLL.ApplicationLicense.License).Assembly.GetName().Version.ToString();

        var rMode = Boolean.Parse(System.Configuration.ConfigurationManager.AppSettings["releaseMode"] ?? "true");
        if (!rMode) {
            v = (DateTime.Now - DateTime.MinValue).TotalMilliseconds.ToString();
        }
        var useApp = BLL.Process.CommonUtils.AppSettings.useApp();
    }

    @if (ViewBag.cdn.enable) {
        for (int i = 0; i < ViewBag.cdn.items.Count; i++) {
            if (ViewBag.cdn.items[i].type == 1) {
                <script src="@ViewBag.cdn.items[i].link"></script>
            }
            if (ViewBag.cdn.items[i].type == 0) {
                <link href="@ViewBag.cdn.items[i].link" rel="stylesheet" />
            }
        }
    }

    <style>
        [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak, .ng-hide {
            display: none !important;
        }
    </style>
</head>


<body layout="row" layout-fill @(ViewBag.isRtl ? @"dir=rtl" : "") class="management">
    <input type="hidden" value="@System.Text.RegularExpressions.Regex.Replace( Url.Action("management", "sadaf").ToString().ToLower(), "sadaf/management.*", "")" name="baseUrl" />
    <input type="hidden" value="@Request.Url.AbsoluteUri" name="aboluteUrl" />
    <input type="hidden" value="@v" name="version" />
    <input type="hidden" value="@(Url.Action("management", "sadaf") + "/")" name="hashUrlPrefix" />
    <input type="hidden" value="@(Html.Raw(ViewBag.license).ToString().Replace("\"","\\\""))" name="license" />
    <input type="hidden" value="@ViewBag.lang" id="lang" />
    <input type="hidden" value="@(BLL.ApplicationLicense.ClientLicenseManager.GetInstance().License.DatasourceMetadata ? "true": "false")" name="DatasourceMetadata" />

    <link href="~/react-dist/styles.css?v=@ViewBag.customChartVersion" rel="stylesheet" />

    <link href="~/dist/customCharts.css?v=@ViewBag.customChartVersion" rel="stylesheet" />

    @Html.AntiForgeryToken()
    <input type="hidden" name="upgradeModuleName" value="management" />
    <input type="hidden" value="@ViewBag.noframe" name="noframe" />
    <input type="hidden" value="@useApp" name="useApp" />
    <input type="hidden" value="@(ViewBag.dualBoot == null ? "" : ViewBag.dualBoot.ToString())" name="dualBoot" />
    <dashboard-management flex layout-fill></dashboard-management>

    <script src="~/react-dist/app-bundle.js?v=@v"></script>
    <script src="~/react-dist/bundle.js?v=@v"></script>
    <script src="~/dist/customCharts.js?v=@ViewBag.customChartVersion"></script>
    @*<script src="~/license.js?v=@v"></script>*@
    <script>
        @*var license = JSON.parse('@Html.Raw(ViewBag.license)');
        app.license = _.extend(app.license || {}, license);*@
    </script>


    @*Clickjacking Defense*@
    <style id="antiClickjack">
        body {
            display: none !important;
        }
    </style>

    <script type="text/javascript">
        if (self === top) {
            var antiClickjack = document.getElementById("antiClickjack");
            antiClickjack.parentNode.removeChild(antiClickjack);
        } else {
            top.location = self.location;
        }
    </script>


</body>
</html>