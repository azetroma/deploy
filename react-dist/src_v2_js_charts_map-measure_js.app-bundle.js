"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksadaf"] = self["webpackChunksadaf"] || []).push([["src_v2_js_charts_map-measure_js"],{

/***/ "./src_v2/js/charts/map-measure.js":
/*!*****************************************!*\
  !*** ./src_v2/js/charts/map-measure.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _map_measure_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map-measure.css */ \"./src_v2/js/charts/map-measure.css\");\n/* module decorator */ module = __webpack_require__.hmd(module);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n\n(function (factory, window) {\n  // define an AMD module that relies on 'leaflet'\n  if (typeof define === \"function\" && __webpack_require__.amdO) {\n    define([\"leaflet\"], factory);\n\n    // define a Common JS module that relies on 'leaflet'\n  } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\") {\n    module.exports = factory(__webpack_require__(/*! leaflet */ \"./node_modules/leaflet/dist/leaflet-src.js\"));\n  }\n\n  // attach your plugin to the global 'L' variable\n  if (typeof window !== \"undefined\" && window.L) {\n    factory(L);\n  }\n})(function (L) {\n  L.Measure = {\n    linearMeasurement: \"مسیر\",\n    areaMeasurement: \"محدوده\",\n    start: \"شروع\",\n    meter: \"m\",\n    meterDecimals: 0,\n    kilometer: \"km\",\n    kilometerDecimals: 2,\n    squareMeter: \"m²\",\n    squareMeterDecimals: 0,\n    squareKilometers: \"km²\",\n    squareKilometersDecimals: 2\n  };\n  L.Control.Measure = L.Control.extend({\n    options: {\n      position: \"topleft\",\n      title: \"اندازه‌گیری\",\n      collapsed: true,\n      color: \"#FF0080\"\n    },\n    initialize: function initialize(options) {\n      L.Util.setOptions(this, options);\n    },\n    onAdd: function onAdd(map) {\n      this._map = map;\n      this._container || this._initLayout();\n      return this._container;\n    },\n    _buildContainer: function _buildContainer() {\n      this._container = L.DomUtil.create(\"div\", \"leaflet-control-measure leaflet-bar leaflet-control\");\n      this._contents = L.DomUtil.create(\"div\", \"leaflet-measure-contents\", this._container);\n      this._link = L.DomUtil.create(\"a\", \"leaflet-measure-toggle\", this._container);\n      this._link.title = this.options.title || \"Measurement\";\n      this._link.href = \"#\";\n      if (this.options.title) {\n        var title = L.DomUtil.create(\"h3\", \"\", this._contents);\n        title.innerText = this.options.title;\n      }\n      this._buildItems();\n    },\n    _buildItems: function _buildItems() {\n      var ele_ul = L.DomUtil.create(\"ul\", \"leaflet-measure-actions\", this._contents);\n      var ele_li = L.DomUtil.create(\"li\", \"leaflet-measure-action\", ele_ul);\n      var ele_link_line = L.DomUtil.create(\"a\", \"start\", ele_li);\n      ele_link_line.innerText = L.Measure.linearMeasurement;\n      ele_link_line.href = \"#\";\n      L.DomEvent.disableClickPropagation(ele_link_line);\n      L.DomEvent.on(ele_link_line, \"click\", this._enableMeasureLine, this);\n      ele_li = L.DomUtil.create(\"li\", \"leaflet-measure-action\", ele_ul);\n      var ele_link_area = L.DomUtil.create(\"a\", \"leaflet-measure-action start\", ele_li);\n      ele_link_area.innerText = L.Measure.areaMeasurement;\n      ele_link_area.href = \"#\";\n      L.DomEvent.disableClickPropagation(ele_link_area);\n      L.DomEvent.on(ele_link_area, \"click\", this._enableMeasureArea, this);\n    },\n    _initLayout: function _initLayout() {\n      this._buildContainer();\n      L.DomEvent.disableClickPropagation(this._container);\n      L.DomEvent.disableScrollPropagation(this._container);\n      if (this.options.collapsed) {\n        L.DomEvent.on(this._container, {\n          mouseenter: this._expand,\n          mouseleave: this._collapse\n        }, this);\n      } else {\n        this._expand();\n      }\n    },\n    _enableMeasureLine: function _enableMeasureLine(ev) {\n      L.DomEvent.stopPropagation(ev);\n      L.DomEvent.preventDefault(ev);\n      this._measureHandler = new L.MeasureAction(this._map, {\n        model: \"distance\",\n        color: this.options.color\n      });\n      this._measureHandler.enable();\n    },\n    _enableMeasureArea: function _enableMeasureArea(ev) {\n      L.DomEvent.stopPropagation(ev);\n      L.DomEvent.preventDefault(ev);\n      this._measureHandler = new L.MeasureAction(this._map, {\n        model: \"area\",\n        color: this.options.color\n      });\n      this._measureHandler.enable();\n    },\n    _expand: function _expand() {\n      this._link.style.display = \"none\";\n      L.DomUtil.addClass(this._container, \"leaflet-measure-expanded\");\n      return this;\n    },\n    _collapse: function _collapse() {\n      this._link.style.display = \"block\";\n      L.DomUtil.removeClass(this._container, \"leaflet-measure-expanded\");\n      return this;\n    }\n  });\n  L.control.measure = L.control.Measure = function (options) {\n    return new L.Control.Measure(options);\n  };\n  L.MeasureLable = L.Layer.extend({\n    options: {\n      offset: new L.Point(0, 30),\n      latlng: null,\n      content: \"\",\n      className: \"\"\n    },\n    initialize: function initialize(options) {\n      L.Util.setOptions(this, options);\n    },\n    onAdd: function onAdd(map) {\n      this._map = map;\n      this._container || this._initLayout();\n      map._panes.popupPane.appendChild(this._container);\n      map.on(\"viewreset\", this._updatePosition, this);\n      if (L.Browser.any3d) {\n        map.on(\"zoomanim\", this._zoomAnimation, this);\n      }\n      this._update();\n    },\n    addTo: function addTo(map) {\n      map.addLayer(this);\n      return this;\n    },\n    onRemove: function onRemove(map) {\n      map._panes.popupPane.removeChild(this._container);\n      map.off({\n        viewreset: this._updatePosition,\n        zoomanim: this._zoomAnimation\n      }, this);\n      this._map = null;\n    },\n    setLatLng: function setLatLng(latlng) {\n      this.options.latlng = L.latLng(latlng);\n      this._updatePosition();\n      return this;\n    },\n    setContent: function setContent(content) {\n      this.options.content = content;\n      this._updateContent();\n      return this;\n    },\n    _initLayout: function _initLayout() {\n      this._container = L.DomUtil.create(\"div\", this.options.className);\n      this._contentNode = L.DomUtil.create(\"div\", \"content\", this._container);\n    },\n    _update: function _update() {\n      this._map && (this._updateContent(), this._updatePosition());\n    },\n    _updateContent: function _updateContent() {\n      if (this.options.content) {\n        if (typeof this.options.content == \"string\") {\n          this._contentNode.innerHTML = this.options.content;\n        } else {\n          this._contentNode.innerHTML = \"\";\n          this._contentNode.appendChild(this.options.content);\n        }\n      }\n    },\n    _updatePosition: function _updatePosition() {\n      var point = this._map.latLngToLayerPoint(this.options.latlng),\n        is3D = L.Browser.any3d,\n        offset = this.options.offset;\n      is3D && L.DomUtil.setPosition(this._container, point);\n      this._containerBottom = -offset.y - (is3D ? 0 : point.y);\n      this._containerLeft = offset.x + (is3D ? 0 : point.x);\n      this._container.style.bottom = this._containerBottom + \"px\";\n      this._container.style.left = this._containerLeft + \"px\";\n    },\n    _zoomAnimation: function _zoomAnimation(a) {\n      a = this._map._latLngToNewLayerPoint(this.options.latlng, a.zoom, a.center);\n      L.DomUtil.setPosition(this._container, a);\n    },\n    enableClose: function enableClose() {\n      this._closeButton = L.DomUtil.create(\"span\", \"close\", this._container);\n      this._closeButton.innerHTML = '<svg class=\"icon\" viewBox=\"0 0 40 40\"><path stroke=\"#FF0000\" stroke-width=\"3\" d=\"M 10,10 L 30,30 M 30,10 L 10,30\" /></svg>';\n      return this._closeButton;\n    }\n  });\n  L.MeasureAction = L.Handler.extend({\n    options: {\n      color: \"#FF0080\",\n      model: \"distance\" // area or distance\n    },\n    initialize: function initialize(map, options) {\n      this._map = map;\n      this._map._measureHandler = this;\n      L.Util.setOptions(this, options);\n    },\n    setModel: function setModel(model) {\n      this.options.model = model;\n      return this;\n    },\n    addHooks: function addHooks() {\n      this._activeMeasure();\n    },\n    removeHooks: function removeHooks() {},\n    _activeMeasure: function _activeMeasure() {\n      this._map._measureHandler._measurementStarted && this._map._measureHandler._finishMeasure();\n      this._measurementStarted ? this._finishMeasure() : this._enableMeasure();\n    },\n    _onMouseClick: function _onMouseClick(event) {\n      var latlng = event.latlng || this._map.mouseEventToLatLng(event);\n      if (this._lastPoint && latlng.equals(this._lastPoint)) {\n        return;\n      }\n      if (this._trail.points.length > 0) {\n        var points = this._trail.points;\n        points.push(latlng);\n        var length = points.length;\n        this._totalDistance += this._getDistance(points[length - 2], points[length - 1]);\n        this._addMeasurePoint(latlng);\n        this._addMarker(latlng);\n        if (this.options.model !== \"area\") {\n          this._addLable(latlng, this._getDistanceString(this._totalDistance), \"leaflet-measure-lable\");\n        }\n      } else {\n        this._totalDistance = 0;\n        this._addMeasurePoint(latlng);\n        this._addMarker(latlng);\n        if (this.options.model !== \"area\") {\n          this._addLable(latlng, L.Measure.start, \"leaflet-measure-lable\");\n        }\n        this._trail.points.push(latlng);\n      }\n      this._lastPoint = latlng;\n      this._startMove = false;\n    },\n    _onMouseMove: function _onMouseMove(event) {\n      var latlng = event.latlng;\n      if (this._trail.points.length > 0) {\n        if (this._startMove) {\n          this._directPath.setLatLngs(this._trail.points.concat(latlng));\n        } else {\n          this._directPath.setLatLngs([latlng]);\n          this._startMove = true;\n        }\n      }\n    },\n    _enableMeasure: function _enableMeasure() {\n      var map = this._map;\n      this._trail = {\n        points: [],\n        overlays: L.featureGroup(),\n        canvas: map.options.preferCanvas || false\n      };\n      if (map.options.preferCanvas) {\n        map.options.preferCanvas = false;\n        console.warn('Temporarily reset map.options.prefersCanvas to false');\n        //HACK: With canvas rendering enabled (and no other markers present on the map), this will create an permanent\n        // overlaying layer of type L.Canvas that swallows mouse events.\n      }\n      map.addLayer(this._trail.overlays);\n      L.DomUtil.addClass(map._container, \"leaflet-measure-map\");\n      map.contextMenu && map.contextMenu.disable();\n      this._measurementStarted = true;\n      map.on(\"click\", this._onMouseClick, this);\n      map.on(\"dblclick contextmenu\", this._finishMeasure, this);\n      map.doubleClickZoom.disable();\n      map.on(\"mousemove\", this._onMouseMove, this);\n    },\n    _disableMeasure: function _disableMeasure() {\n      var map = this._map;\n      L.DomUtil.removeClass(map.getContainer(), \"leaflet-measure-map\");\n      map.contextMenu && map.contextMenu.enable();\n      map.off(\"click\", this._onMouseClick, this);\n      map.off(\"dblclick contextmenu\", this._finishMeasure, this);\n      map.off(\"mousemove\", this._onMouseMove, this);\n      map.doubleClickZoom.enable();\n      this._measurementStarted = this._startMove = false;\n      this.disable();\n    },\n    _finishMeasure: function _finishMeasure(event) {\n      if (this._trail.points.length > 0) {\n        if (this._trail.points.length > 1) {\n          if (!event || event.type === \"contextmenu\") {\n            this._directPath.setLatLngs(this._trail.points);\n          }\n          if (this.options.model === \"area\") {\n            this._addLable(this._lastPoint, this._getAreaString(this._trail.points), \"leaflet-measure-lable\", true);\n          } else {\n            this._addLable(this._lastPoint, this._getDistanceString(this._totalDistance), \"leaflet-measure-lable\", true);\n          }\n          this._directPath && this._map.removeLayer(this._directPath);\n        } else {\n          this._clearOverlay.call(this);\n        }\n      }\n      this._disableMeasure();\n    },\n    _resetDirectPath: function _resetDirectPath(latlng) {\n      if (!this._directPath) {\n        if (this.options.model === \"area\") {\n          this._directPath = new L.Polygon([latlng], {\n            weight: 2,\n            color: this.options.color,\n            dashArray: [5, 5],\n            fillOpacity: 0,\n            interactive: false\n          });\n        } else {\n          this._directPath = new L.Polyline([latlng], {\n            weight: 2,\n            color: this.options.color,\n            dashArray: [5, 5],\n            interactive: false\n          });\n        }\n        this._trail.overlays.addLayer(this._directPath);\n      } else {\n        this._directPath.addLatLng(latlng);\n      }\n    },\n    _addMeasurePoint: function _addMeasurePoint(latlng) {\n      if (!this._measurePath) {\n        if (this.options.model === \"area\") {\n          this._measurePath = new L.Polygon([latlng], {\n            weight: 2,\n            color: this.options.color,\n            fillColor: this.options.color,\n            fillOpacity: 0.5,\n            interactive: false\n          });\n        } else {\n          this._measurePath = new L.Polyline([latlng], {\n            weight: 2,\n            color: this.options.color,\n            interactive: false\n          });\n        }\n        this._trail.overlays.addLayer(this._measurePath);\n      } else {\n        this._measurePath.addLatLng(latlng);\n      }\n      this._resetDirectPath(latlng);\n    },\n    _addMarker: function _addMarker(latLng) {\n      var marker = new L.CircleMarker(latLng, {\n        color: this.options.color,\n        opacity: 1,\n        weight: 1,\n        fillColor: \"#FFFFFF\",\n        fill: true,\n        fillOpacity: 1,\n        radius: 3,\n        interactive: false\n      });\n      this._trail.overlays.addLayer(marker);\n    },\n    _addLable: function _addLable(latlng, content, className, ended) {\n      var lable = new L.MeasureLable({\n        latlng: latlng,\n        content: content,\n        className: className\n      });\n      this._trail.overlays.addLayer(lable);\n      if (ended) {\n        var closeButton = lable.enableClose();\n        L.DomEvent.on(closeButton, \"click\", this._clearOverlay, this);\n      }\n    },\n    _clearOverlay: function _clearOverlay() {\n      this._map.removeLayer(this._trail.overlays);\n      this._trail.overlays = null;\n      this._map.options.preferCanvas = this._trail.canvas;\n    },\n    toRadians: function toRadians(deg) {\n      return deg * (Math.PI / 180);\n    },\n    square: function square(x) {\n      return Math.pow(x, 2);\n    },\n    _getDistanceString: function _getDistanceString(distance) {\n      return distance < 1e3 ? this._numberFormat(distance, L.Measure.meterDecimals) + \" \" + L.Measure.meter : this._numberFormat(distance / 1e3, L.Measure.kilometerDecimals) + \" \" + L.Measure.kilometer;\n    },\n    _getDistance: function _getDistance(latlng1, latlng2) {\n      var earthRadius = 6378137; // radius of the earth in meter\n      var lat1 = this.toRadians(latlng1.lat);\n      var lat2 = this.toRadians(latlng2.lat);\n      var lat_dif = lat2 - lat1;\n      var lng_dif = this.toRadians(latlng2.lng - latlng1.lng);\n      var a = this.square(Math.sin(lat_dif / 2)) + Math.cos(lat1) * Math.cos(lat2) * this.square(Math.sin(lng_dif / 2));\n      return 2 * earthRadius * Math.asin(Math.sqrt(a));\n    },\n    _getAreaString: function _getAreaString(points) {\n      var a = this._getArea(points);\n      return Math.round(a) < 1e6 ? this._numberFormat(a, L.Measure.squareMeterDecimals) + \" \" + L.Measure.squareMeter : this._numberFormat(a / 1e6, L.Measure.squareKilometersDecimals) + \" \" + L.Measure.squareKilometers;\n    },\n    _getArea: function _getArea(points) {\n      var earthRadius = 6378137;\n      var area = 0;\n      var len = points.length;\n      var x1 = points[len - 1].lng;\n      var y1 = points[len - 1].lat;\n      for (var i = 0; i < len; i++) {\n        var x2 = points[i].lng;\n        var y2 = points[i].lat;\n        area += this.toRadians(x2 - x1) * (2 + Math.sin(this.toRadians(y1)) + Math.sin(this.toRadians(y2)));\n        x1 = x2;\n        y1 = y2;\n      }\n      return Math.abs(area * earthRadius * earthRadius / 2.0);\n    },\n    _numberFormat: function _numberFormat(number) {\n      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var thousandsSep = \",\";\n      var sign = number < 0 ? \"-\" : \"\";\n      var num = Math.abs(+number || 0);\n      var intPart = parseInt(num.toFixed(decimals), 10) + \"\";\n      var j = intPart.length > 3 ? intPart.length % 3 : 0;\n      return [sign, j ? intPart.substr(0, j) + thousandsSep : \"\", intPart.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSep), decimals ? \".\" + Math.abs(num - intPart).toFixed(decimals).slice(2) : \"\"].join(\"\");\n    }\n  });\n  L.measureAction = function (map, options) {\n    return new L.MeasureAction(map, options);\n  };\n}, window);\n\n//# sourceURL=webpack://sadaf/./src_v2/js/charts/map-measure.js?");

/***/ }),

/***/ "./src_v2/js/charts/map-measure.css":
/*!******************************************!*\
  !*** ./src_v2/js/charts/map-measure.css ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://sadaf/./src_v2/js/charts/map-measure.css?");

/***/ })

}]);