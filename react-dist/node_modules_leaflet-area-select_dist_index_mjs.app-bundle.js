"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksadaf"] = self["webpackChunksadaf"] || []).push([["node_modules_leaflet-area-select_dist_index_mjs"],{

/***/ "./node_modules/leaflet-area-select/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/leaflet-area-select/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ l)\n/* harmony export */ });\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leaflet */ \"./node_modules/leaflet/dist/leaflet-src.js\");\n\n/**\n * L.Map.SelectArea - Area selection tool for leaflet\n *\n * @author Alexander Milevski <info@w8r.name>\n * @see https://github.com/w8r/leaflet-area-select\n * @license MIT\n * @preserve\n */\nvar r = function() {\n  return !0;\n};\nleaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea = leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.BoxZoom.extend({\n  statics: {\n    /**\n     * @static\n     * @type {String}\n     */\n    SELECT_AREA_SELECTED: \"selectarea:selected\",\n    /**\n     * @static\n     * @type {String}\n     */\n    SELECT_AREA_START: \"selectarea:start\",\n    /**\n     * @static\n     * @type {String}\n     */\n    SELECT_AREA_TOGGLED: \"selectarea:toggled\"\n  },\n  options: {\n    shiftKey: !1,\n    ctrlKey: !0,\n    validate: r,\n    autoDisable: !1,\n    cursor: \"crosshair\"\n  },\n  /**\n   * @param  {L.Map} map\n   * @constructor\n   */\n  initialize: function(t, e) {\n    leaflet__WEBPACK_IMPORTED_MODULE_0__.Util.setOptions(this, e || {}), leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.BoxZoom.prototype.initialize.call(this, t), this._validate = null, this._moved = !1, this._autoDisable = !this.options.ctrlKey && this.options.autoDisable, this._lastLayerPoint = null, this._beforeCursor = null, this.setValidate(this.options.validate), this.setAutoDisable(this.options.autoDisable);\n  },\n  /**\n   * @param  {Function=} validate\n   * @return {SelectArea}\n   */\n  setValidate: function(t) {\n    var e = this;\n    return typeof t != \"function\" && (t = r), this._validate = function(i) {\n      return t.call(e, i);\n    }, this;\n  },\n  /**\n   * @param {Boolean} autoDisable\n   */\n  setAutoDisable: function(t) {\n    this._autoDisable = !!t;\n  },\n  /**\n   * @param {Boolean} on\n   */\n  setControlKey: function(t) {\n    var e = this._enabled;\n    e && this.disable(), this.options.ctrlKey = !!t, t && (this.options.shiftKey = !1), e && this.enable();\n  },\n  /**\n   * @param {Boolean} on\n   */\n  setShiftKey: function(t) {\n    var e = this._enabled;\n    e && this.disable(), this.options.shiftKey = !!t, t && (this.options.ctrlKey = !1), e && this.enable();\n  },\n  /**\n   * Disable dragging or zoombox\n   * @param {Function=} validate\n   * @param {Boolean=}  autoDisable\n   */\n  enable: function(t, e) {\n    this.options.shiftKey ? this._map.boxZoom && this._map.boxZoom.disable() : this.options.ctrlKey || this._map.dragging.disable(), leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.BoxZoom.prototype.enable.call(this), this.options.ctrlKey || this._setCursor(), t && this.setValidate(t), this.setAutoDisable(e), this._map.fire(leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea.SELECT_AREA_TOGGLED);\n  },\n  /**\n   * Re-enable box zoom or dragging\n   */\n  disable: function() {\n    leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.BoxZoom.prototype.disable.call(this), this.options.ctrlKey || this._restoreCursor(), this.options.shiftKey ? this._map.boxZoom && this._map.boxZoom.enable() : this._map.dragging.enable(), this._map.fire(leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea.SELECT_AREA_TOGGLED);\n  },\n  /**\n   * Also listen to ESC to cancel interaction\n   * @override\n   */\n  addHooks: function() {\n    leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.BoxZoom.prototype.addHooks.call(this), leaflet__WEBPACK_IMPORTED_MODULE_0__.DomEvent.on(document, \"keyup\", this._onKeyUp, this).on(document, \"keydown\", this._onKeyPress, this).on(document, \"contextmenu\", this._onMouseDown, this).on(window, \"blur\", this._onBlur, this), this._map.on(\"dragstart\", this._onMouseDown, this);\n  },\n  /**\n   * @override\n   */\n  removeHooks: function() {\n    leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.BoxZoom.prototype.removeHooks.call(this), leaflet__WEBPACK_IMPORTED_MODULE_0__.DomEvent.off(document, \"keyup\", this._onKeyUp, this).off(document, \"keydown\", this._onKeyPress, this).off(document, \"contextmenu\", this._onMouseDown, this).off(window, \"blur\", this._onBlur, this), this._map.off(\"dragstart\", this._onMouseDown, this);\n  },\n  /**\n   * @override\n   */\n  _onMouseDown: function(t) {\n    if (this._moved = !1, this._lastLayerPoint = null, this.options.shiftKey && !t.shiftKey || this.options.ctrlKey && !t.ctrlKey || t.which !== 1 && t.button !== 1)\n      return !1;\n    leaflet__WEBPACK_IMPORTED_MODULE_0__.DomEvent.stop(t);\n    var e = this._map.mouseEventToLayerPoint(t);\n    if (!this._validate(e)) return !1;\n    leaflet__WEBPACK_IMPORTED_MODULE_0__.DomUtil.disableTextSelection(), leaflet__WEBPACK_IMPORTED_MODULE_0__.DomUtil.disableImageDrag(), this._startLayerPoint = e, leaflet__WEBPACK_IMPORTED_MODULE_0__.DomEvent.on(document, \"mousemove\", this._onMouseMove, this).on(document, \"mouseup\", this._onMouseUp, this).on(document, \"keydown\", this._onKeyDown, this);\n  },\n  /**\n   * @override\n   */\n  _onMouseMove: function(t) {\n    this._moved || (this._box = leaflet__WEBPACK_IMPORTED_MODULE_0__.DomUtil.create(\"div\", \"leaflet-zoom-box\", this._pane), leaflet__WEBPACK_IMPORTED_MODULE_0__.DomUtil.setPosition(this._box, this._startLayerPoint), this._map.fire(leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea.SELECT_AREA_START));\n    var e = this._startLayerPoint, i = this._box, o = this._map.mouseEventToLayerPoint(t), a = o.subtract(e);\n    if (this._validate(o)) {\n      this._lastLayerPoint = o;\n      var n = new leaflet__WEBPACK_IMPORTED_MODULE_0__.Point(\n        Math.min(o.x, e.x),\n        Math.min(o.y, e.y)\n      );\n      leaflet__WEBPACK_IMPORTED_MODULE_0__.DomUtil.setPosition(i, n), this._moved = !0, i.style.width = Math.max(0, Math.abs(a.x) - 4) + \"px\", i.style.height = Math.max(0, Math.abs(a.y) - 4) + \"px\";\n    }\n  },\n  /**\n   * General on/off toggle\n   * @param  {KeyboardEvent} e\n   */\n  _onKeyUp: function(t) {\n    t.keyCode === 27 ? this._moved && this._box && this._finish() : this.options.ctrlKey && (this._restoreCursor(), this._map.dragging.enable());\n  },\n  /**\n   * Key down listener to enable on ctrl-press\n   * @param  {KeyboardEvent} e\n   */\n  _onKeyPress: function(t) {\n    this.options.ctrlKey && (t.ctrlKey || t.type === \"dragstart\") && this._beforeCursor === null && (this._setCursor(), this._map.dragging._draggable._onUp(t), this._map.dragging.disable());\n  },\n  /**\n   * Window blur listener to restore state\n   * @param  {Event} e\n   */\n  _onBlur: function(t) {\n    this._restoreCursor(), this._map.dragging.enable();\n  },\n  /**\n   * Set crosshair cursor\n   */\n  _setCursor: function() {\n    this._beforeCursor = this._container.style.cursor, this._container.style.cursor = this.options.cursor;\n  },\n  /**\n   * Restore status quo cursor\n   */\n  _restoreCursor: function() {\n    this._container.style.cursor = this._beforeCursor, this._beforeCursor = null;\n  },\n  /**\n   * @override\n   */\n  _onMouseUp: function(t) {\n    this._finish();\n    var e = this._map, i = this._lastLayerPoint;\n    if (!(!i || this._startLayerPoint.equals(i))) {\n      leaflet__WEBPACK_IMPORTED_MODULE_0__.DomEvent.stop(t);\n      var o = e.layerPointToLatLng(this._startLayerPoint), a = e.layerPointToLatLng(i), n = new leaflet__WEBPACK_IMPORTED_MODULE_0__.LatLngBounds(o, a);\n      this._autoDisable ? this.disable() : this._restoreCursor(), this._moved = !1, leaflet__WEBPACK_IMPORTED_MODULE_0__.Util.requestAnimFrame(function() {\n        e.fire(leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea.SELECT_AREA_SELECTED, {\n          bounds: n,\n          start: o,\n          end: a\n        });\n      });\n    }\n  }\n});\nleaflet__WEBPACK_IMPORTED_MODULE_0__.Map.mergeOptions({\n  selectArea: !1\n});\nleaflet__WEBPACK_IMPORTED_MODULE_0__.Map.addInitHook(\"addHandler\", \"selectArea\", leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea);\nconst l = leaflet__WEBPACK_IMPORTED_MODULE_0__.Map.SelectArea;\n\n\n\n//# sourceURL=webpack://sadaf/./node_modules/leaflet-area-select/dist/index.mjs?");

/***/ })

}]);